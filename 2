import express, { Application } from 'express';
import mongoose, { ConnectOptions } from 'mongoose';
import dotenv from 'dotenv';
import userRoutes from './routes/userRoutes';
import staticRouter from './routes/staticRouter';
import { Server as SocketIOServer } from 'socket.io';
import { registerSocketHandlers } from './socket';
import http from 'http';
const path = require('path');
const cors = require("cors");

dotenv.config();
const app: Application = express();
const server = http.createServer(app);
const io = new SocketIOServer(server);
const PORT = process.env.PORT || 5000;

// Middleware to parse JSON bodies
app.use(express.json());

// MongoDB connection
mongoose.connect(process.env.MONGO_URI as string, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
} as ConnectOptions)
  .then(() => console.log('MongoDB connected'))
  .catch((err) => console.log('MongoDB connection error:', err));

// Routes
app.use(cors());
app.use('/uploads', express.static('uploads'));
app.use('/api', userRoutes);
app.use('/', staticRouter);

app.all("*", (req, res) => {
  res.status(404);
  if (req.accepts("html")) {
    res.sendFile(path.join(__dirname, "views", "404.html"));
  } else if (req.accepts("json")) {
    res.json({ error: "404 Not Found" });
  } else {
    res.type("txt").send("404 Not Found");
  }
});

// Socket.io setup
io.on('connection', (socket) => {
  console.log(`âš¡ New client connected: ${socket.id}`);
  registerSocketHandlers(socket, io);
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

module.exports = app;
